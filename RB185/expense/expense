#! /usr/bin/env ruby

require "pg"

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def setup_schema
    result = @connection.exec("SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses'")
    if result.values[0][0] == "0"
      @connection.exec <<~SQL
      CREATE TABLE expenses (
        id serial PRIMARY KEY,
        amount numeric(6,2) NOT NULL CHECK (amount >= 0.01),
        memo text NOT NULL,
        created_on date NOT NULL
      );
    SQL
    end
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC")
    sum = @connection.exec("SELECT SUM(amount) FROM expenses").values[0][0]
    number_of_expenses = result.values.size
    total_display = ""

    case number_of_expenses
    when 0
      puts "There are no expenses."
      abort
    when 1
      puts "There is 1 expense."
      display_expenses(result)
    else
      puts "There are #{number_of_expenses} expenses"
      display_expenses(result)
    end
    puts ("-" * 40)
    puts ("Total" + " " * 21 + sum.to_s)
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    @connection.exec_params(sql, [amount, memo, date])
  end

  def search_expenses(search_term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @connection.exec_params(sql,["%#{search_term}%"])
    display_expenses(result)
  end

  def delete_expense(id)
    result = select_id(id)
    sql = "DELETE FROM expenses WHERE id = $1"

    if result.values.size == 0
      puts "There is no expense with the id '#{id}'."
    else
      @connection.exec_params(sql,[id])
      puts "The following expense has been deleted:"
      display_expenses(result)
    end
  end

  def delete_all_expenses
    sql = "DELETE FROM expenses"
    puts "This will remove all expenses. Are you sure? (y/n)"
    user_input = gets.chomp
    if user_input == 'y'
      @connection.exec(sql)
      puts "All expenses has been deleted"
    end 
  end
 
private
  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(12),
                  tuple["memo"] ]

      puts columns.join(" | ")
    end
  end

  def select_id(id)
    sql = "SELECT * FROM expenses WHERE id = $1"
    result = @connection.exec_params(sql,[id])
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    command = arguments.shift
    case command
    when "add"
      amount = arguments[0]
      memo = arguments[1]
      abort "You must provide an amount and memo." unless amount && memo
      @application.add_expense(amount, memo)
    when "list"
      @application.list_expenses
    when "search"
      search_term = arguments[0]
      @application.search_expenses(search_term)
    when "delete"
      id = arguments[0]
      @application.delete_expense(id)
    when "clear"
      @application.delete_all_expenses
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)